summary(lm.states)
install.packages("stargazer")
library(stargazer)
stargazer(attitude)
states <- read.dta("http://s3.amazonaws.com/KatzCloud/states_w_dummies.dta")
library(foreign)
states <- read.dta("http://s3.amazonaws.com/KatzCloud/states_w_dummies.dta")
states <- read.dta("http://s3.amazonaws.com/KatzCloud/states_w_dummy_var.dta")
states <- read.dta("http://s3.amazonaws.com/KatzCloud/states_with_dummy_var.dta")
reg0_states <-lm(csat~expense+percent+income, data=states)
reg1_states <-lm(csat~expense+percent+income+high+college+region2+region3+region4, data=states)
reg2_states <-lm(csat~expense+percent+income+high+college, data=states)
stargazer(reg0_states, reg1_states, reg2_states, title="Regression Results", align=TRUE)
reg1_states <-lm(csat~expense+percent+income+high+college+region2+region3+region4, data=states)
summary(reg1_states)
auto <-read.dta("http://s3.amazonaws.com/KatzCloud/auto.dta")
head(auto)
View(auto)
print(auto)
var.labels(auto)
lm.auto <- lm(auto$price ~ auto$mpg + auto$rep78 + auto$headroom + auto$trunk + auto$weight + auto$length + auto$turn + auto$displacement + auto$gear_ratio + auto$foreign)
summary(lm.auto)
stargazer(auto)
stargazer(lm.auto)
lm.auto <- lm(price ~ mpg + rep78 + headroom + trunk + weight + length + turn + displacement + gear_ratio + foreign, data=auto)
summary(lm.auto)
var.labels <-attr(auto, "var.labels")
data.key <- data.frame(var.name=names(auto), var.labels)
print(data.key)
stargazer(data.key)
save.image("~/Documents/R/QA3.RData")
library(ggplot2)
library(foreign)
attend <- read.dta("http://s3.amazonaws.com/KatzCloud/ATTEND.dta")
View(attend)
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=factor(attend$soph))) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
library(Hmisc)
install.packages("ggthemes")
library(ggthemes)
library(Hmisc)
library(reshape2)
update.packages()
update.packages('ggplot2')
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=factor(attend$soph))) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=category + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=category + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=category + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=category + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=category)) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=red)) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour=red)) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final)) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour="red")) + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= frosh)) + + scale_colour_gradient(low = "blue") + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= frosh)) + scale_colour_gradient(low = "blue") + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= frosh)) + scale_colour_gradient(low = "blue", high = "red") + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= frosh))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= pink))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final)) + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_gradient(name = "Freshmen vs Sophomores", low = pink, high = red) + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_gradient(name = "Freshmen vs Sophomores", low = red, high = blue) + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_gradient(name = "Freshmen vs Sophomores", low = "red", high = "blue") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores", low = "red", high = "blue") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores", hue = "red") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores", colour = "red") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + scale_colour_discrete(name = "Freshmen vs Sophomores") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))  + theme(legend.key.width = unit(0.2, "in"), legend.key.height = unit(0.3, "cm"))
install.packages("lmtest")
library(lmtest)
bptest()
reg_1 <- lm(final ~ attend + termgpa + priGPA + ACT + atndrte + hwrte + frosh + soph + skipped, data=attend)
summary(reg_1)
reg_1 <- lm(final ~ skipped + termgpa + priGPA + ACT + hwrte + frosh + soph, data=attend)
summary(reg_1)
reg_1 <- lm(final ~ skipped + ACT + hwrte + frosh + soph, data=attend)
summary(reg_1)
reg_1 <- lm(final ~ skipped + hwrte + frosh + soph, data=attend)
summary(reg_1)
reg_1 <- lm(final ~ skipped + ACT + hwrte + frosh + soph, data=attend)
summary(reg_1)
reg_2 <- lm(final ~ skipped + ACT + hwrte, data=attend)
summary(reg_2)
plot(attend$final, resid(reg_1))
plot(reg_1, resid(reg_1))
bptest(final ~ skipped + ACT + hwrte, data=attend)
bptest(final ~ skipped + ACT + hwrte + frosh + soph, data=attend)
cor.test(attend$skipped, attend$final)
install.packages("car")
library(car)
vif(reg_1)
ggplot(attend) + geom_point(aes(x=skipped, y=final, colour= "pink"))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))
ggplot(attend) + geom_point(aes(x=skipped, y=final))  + scale_x_continuous("Number of Classes Skipped") + scale_y_continuous("Final Exam Score") + ggtitle("Final Exam Scores vs. Number of Classes Skipped") + geom_smooth(method=lm, se=FALSE, fullrange=T, aes(x=skipped, y=final))
stargazer(reg_1, reg_2)
library(stargazer)
stargazer(reg_1, reg_2)
load("~/Documents/R/QA3.RData")
lm.auto <- lm(price ~ mpg + rep78 + headroom + trunk + weight + length + turn + displacement + gear_ratio + foreign, data=auto)
lm.auto_0 <- lm(price ~ mpg + headroom + trunk + weight + length, data=auto)
summary(lm.auto)
summary(lm.auto_0)
View(auto)
lm.auto_2 <- lm(price ~ mpg + rep78 + weight + length + foreign, data=auto)
summary(lum.auto_2)
summary(lm.auto_2)
lm.auto_3 <- lm(price ~ rep78 + headroom + weight + length + foreign, data=auto)
summary(lm.auto_3)
info(logit)
logit()
logit(info)
logit(lm.auto)
glm
glm()
library(ggplot2)
library(foreign)
load("/Users/andyninh/Documents/R/Legal Analytics/ML_for_Hackers/01-Introduction/chapter1.RData")
# File-Name:       Wine_Classifier.R
# Due:             02/28/14
# By:              Andy Ninh
# Prompt:          Please Replicate the Wine Quality Classifier
# Data Used:       Wine Quality Data Set from UCI Machine Learning Repository, available at http://www.nd.edu/~mclark19/learn/data/goodwine.csv
# Results:         See Legal_Analytics_Spring_2014 / Problem_Set1 / Email_Outputs.md
# Packages Used:
# File-Name:       Wine_Classifier.R
# Due:             02/28/14
# By:              Andy Ninh
# Prompt:          Please Replicate the Wine Quality Classifier
# Data Used:       Wine Quality Data Set from UCI Machine Learning Repository,
#                   Available at http://www.nd.edu/~mclark19/learn/data/goodwine.csv
# Packages Used:    doSNOW, corrplot, caret
Load the packages
library(doSNOW)
library(corrplot)
library(caret)
install.packages('caret')
install.packages('corrplot')
install.packages(c("caret", "corrplot", "doSNOW"))
install.packages("knitr")
library(doSNOW)
library(corrplot)
library(caret)
registerDoSNOW(makeCluster(3, type = "SOCK"))
wine <- read.csv("http://www.nd.edu/~mclark19/learn/data/goodwine.csv")
corrplot(cor(wine[, -c(13, 15)]), method = "number", tl.cex = 0.5)
set.seed(1234)
trainIndices <- createDataPartition(wine$good, p = 0.8, list = F)
wanted <- !colnames(wine) %in% c("free.sulfur.dioxide", "density", "quality", "color", "white")
wine_train <- wine[trainIndices, wanted]
wine_test <- wine[-trainIndices, wanted]
wine_trainplot <- predict(preProcess(win_train[,-10], method = "range"), wine_train[,-10])
wine_trainplot <- predict(preProcess(wine_train[,-10], method = "range"), wine_train[,-10])
featurePlot(wine_trainplot, wine_train$good, "box")
set.seed(1234)
cv_opts <- trainControl(method = "cv", number = 10)
knn_opts <- data.frame(.k=c(seq(3, 11, 2), 25, 51, 101)) #odd to avoid ties
results_knn <- train(good~., data = wine_train, method = "knn",
preProcess= "range", trControl=cv_opts,
tuneGrid = knn_opts)
set.seed(1234)
cv_opts <- trainControl(method="cv", number=10)
knn_opts <- data.frame(.k=c(seq(3, 11, 2), 25, 51, 101))
results_knn <- train(good~., data=wine_train, method="knn",
preProcess="range", trControl=cv_opts,
tuneGrid = knn_opts)
results_knn
summary(results_knn)
install.packages("e1071")
install.packages("e1071")
results_knn <- train(good~., data=wine_train, method="knn",
preProcess="range", trControl=cv_opts,
tuneGrid = knn_opts)
library(e1071)
install.packagess("e1071")
install.packages("e1071")
preds_knn <- predict(results_knn, wine_test[,-10])
results_knn <- train(good~., data=wine_train, method="knn",preProcess="range", trControl=cv_opts,tuneGrid = knn_opts)
install.packages("caret", dependencies=TRUE)
install.packages("caret", dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("doSNOW", dependencies=TRUE)
install.packages("doSNOW", dependencies=TRUE)
install.packages(c("corrplot", "doSNOW", "caret"))
install.packages("e1071")
# File-Name:       Wine_Classifier.R
# Due:             02/28/14
# By:              Andy Ninh
# Prompt:          Please Replicate the Wine Quality Classifier
# Data Used:       Wine Quality Data Set from UCI Machine Learning Repository,
#                   Available at http://www.nd.edu/~mclark19/learn/data/goodwine.csv
# Packages Used:    doSNOW, corrplot, caret
# Load the packages
# Package doSNOW (For each parallel adaptor for the snow package)
library(doSNOW)
# Package corrplot (Visualization of a correlation matrix)
library(corrplot)
# Package caret (Classification and Regression Training)
library(caret)
# Import the data set
wine <- read.csv("http://www.nd.edu/~mclark19/learn/data/goodwine.csv")
# Set up R for parallel processing using the registerDoSNOW function
registerDoSNOW(makeCluster(3, type = "SOCK"))
# The corrplot package is a graphical display of a correlation matrix, confidence interval.
corrplot(cor(wine[, -c(13, 15)]), method = "number", tl.cex = 0.5)
# k-nearest neighbors approach gives the value of how far an observation
# is from some other, given their respective values on a set of variables
set.seed(1234) #so that the indices will be the same when re-run
trainIndices <- createDataPartition(wine$good, p = 0.8, list = F)
wanted <- !colnames(wine) %in% c("free.sulfur.dioxide", "density", "quality", "color", "white")
wine_train <- wine[trainIndices, wanted] #remove quality and color, as well as density and others
wine_test <- wine[-trainIndices, wanted]
# Taking an initial peek at how the predictors separateon the target
wine_trainplot <- predict(preProcess(wine_train[,-10], method = "range"), wine_train[,-10])
featurePlot(wine_trainplot, wine_train$good, "box")
# Using 10-fold cross validation
set.seed(1234)
cv_opts <- trainControl(method="cv", number=10)
knn_opts <- data.frame(.k=c(seq(3, 11, 2), 25, 51, 101)) #odd to avoid ties
results_knn <- train(good~., data=wine_train, method="knn",
preProcess="range", trControl=cv_opts,
tuneGrid = knn_opts)
# Model test set performance
preds_knn <- predict(results_knn, wine_test[,-10])
confusionMatrix(pres_knn, wine_test[,-10], positive='Good')
confusionMatrix(preds_knn, wine_test[,-10], positive='Good')
confusionMatrix(preds_knn, wine_test[,10], positive='Good')
library(foreign)
x <- read.table("http://www.stat.cmu.edu/~cshalizi/350/hw/06/cadata.dat")
install.packages("tree")
install.packages("tree", depend=TRUE)
library(tree)
treefit = tree(log(MedianHouseValue) - Longitude+Latitude, data=x)
x <- read.table("http://www.stat.cmu.edu/~cshalizi/350/hw/06/cadata.dat", header=TRUE)
require(tree)
treefit = tree(log(MedianHouseValue) - Longitude+Latitude, data=x)
treefit = tree(log(MedianHouseValue) ~ Longitude+Latitude, data=x)
plot(treefit)
text(treefit,cex=0.75)
require(tree)
treefit = tree(log(MedianHouseValue) ~ Longitude+Latitude,data=calif)
plot(tree)
treefit = tree(log(MedianHouseValue) ~ Longitude+Latitude,data=x)
plot(tree)
require(tree)
plot(treefit)
text(treefit,cex=0.75)
text(treefit, cex=0.75)
rm(list = ls())
library(rpart)
library(arm)
library(foreign)
search.court <- read.dta"http://www.princeton.edu/~jkastell/Trees/search_data_replication.dta", convert.underscore = T
search.court <- read.dta("http://www.princeton.edu/~jkastell/Trees/search_data_replication.dta", convert.underscore = T)
search.court$except <- ifelse(search.court$except >= 1, 1,0) #turn except count variable into binary 0,1
search.court$sctdec <- ifelse(search.court$sctdec == 1, 0, 1)#switch DV so that 1 is a liberal decision
#consistent w/ Benesh data
search.court$dec <- factor(search.court$sctdec, levels=0:1, labels=c("R", "U")) #use this factor for DV
# 0 = reasonable
#1 = unreasonable
attach.all(search.court)
search.court$except <- ifelse(search.court$except >= 1, 1,0)
search.court$sctdec <- ifelse(search.court$sctdec == 1, 0, 1)
search.court$dec <- factor(search.court$sctdec, levels=0:1, labels=c("R", "U"))
attach.all(search.court)
install.packages("R2WinBUGS")
attach.all(search.court)
install.packages("R2WinBUGS", depend=TRUE)
attach.all(search.court)
library(knitr, depend=TRUE)
library(knitr, depend=T)
library(knitr, dep=T)
library(knitr, dep=TRUE)
library(knitr)
library(markdown)
#Predicting Trees
=====================================================================
data(iris)
names(iris)
table(iris$Species)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width,data=iris)
summary(tree1)
data(iris)
names(iris)
table(iris$Species)
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
legend(1,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("mboost", depend=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("~/Documents/MSU Law/Spring 2014/Legal Analytics/Legal_Analytics_Spring_2014/Problem_Set_3/titanic3.sav")
titanic.survival.train <- glm(survived ~ pclass + sex + plcass:sex + age + sibsp, family = binomial(logit), data = titanic.train)
titanic.survival.train <- glm(survived ~ pclass + sex + plcass:sex + age + sibsp, family = binomial(logit), data = titanic3)
setwd("~/Documents/MSU Law/Spring 2014/Legal Analytics/Legal_Analytics_Spring_2014/Problem_Set_3")
# Legal Analytics Problem Set 3 - Part 2
# Andy Ninh
## Loading the Gapminder data
gdURL <- "http://www.stat.ubc.ca/~jennyjenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt"
gDat <- read.delim(file = gdURL)
str(gDat)
# Legal Analytics Problem Set 3 - Part 2
# Andy Ninh
## Loading the Gapminder data
gdURL <- "http://www.stat.ubc.ca/~jennyjenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt"
gDat <- read.delim(file = "gdURL")
library(foreign)
gDat <- read.delim(file = gdURL)
gDat <- read.delim(gdURL)
# Legal Analytics Problem Set 3 - Part 2
# Andy Ninh
## Loading the Gapminder data
gdURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt"
gDat <- read.delim(file = gdURL)
str(gDat)
(snippet <- subset(gDat, country == "Canada"))
summarize(gDAT)
summary(gDAT)
summary(gDat)
install.packages("xtable", dependencies = TRUE)
library(xtable)
Legal Analytics Problem Set 3 - Part 2
-----------------------------------------------------------------------------
## Andy Ninh
-----------------------------------------------------------------------------
## Loading the Gapminder data
```{r}
gdURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt"
gDat <- read.delim(file = gdURL)
```
```{r}
str(gDat)
```
## Storing a snippet of the data
```{r}
(snippet <- subset(gDat, country == "Canada"))
```
## Installing and Loading plyr
```{r}
install.packages("plyr", dependencies = TRUE)
library(plyr)
```
## Using ddply to find the maximum life expentency of each continent
```{r}
(maxLeByCont <- ddply(gDat, ~ continent, summarize, maxLifeExp = max(lifeExp)))
```
## Studying the return value
```{r}
str(maxLeByCont)
levels(maxLeByCont$continent)
```
## Computing the minimum GDP per capita by continent
```{r}
(mingdpPercap <- ddply(gDat, ~ continent, summarize, minGDPperCap = min(gdpPercap)))
```
## Counting the number of countries in the data set
```{r}
ddply(gDat, ~continent, summarize, nUniqCountries = length(unique(country)))
```
## Alternate method without using summarize()
```{r}
ddply(gDat, ~ continent,
function(x) return(c(nUniqCountries = length(unique(x$country)))))
```
## You can compute multiple things per sub-data.frame
```{r}
ddply(gDat, ~ continent, summarize,
minLifeExp = min(lifeExp), maxLifeExp = max(lifeExp),
medGdpPercap = median(gdpPercap))
```
# Putting it all together using ddply()
```{r}
jCountry <- "France"  # pick, but do not hard wire, an example
(jDat <- subset(gDat, country == jCountry))  # temporary measure!
```
## Installing and loading lattice for plotting graphics
```{r}
install.packages("lattice")
library(lattice)
```
## Plotting the data
```{r}
xyplot(lifeExp ~ year, jDat, type = c("p", "r"))  # always plot the data
jFit <- lm(lifeExp ~ year, jDat)
summary(jFit)
```
## Adjusting for fit
```{r}
(yearMin <- min(gDat$year))
jFit <- lm(lifeExp ~ I(year - yearMin), jDat)
summary(jFit)
## The intercept is around 68. This makes much more sense. So, what is jFit and what can we get out of it?
class(jFit)
mode(jFit)
## So, jFit is of class "lm" and its mode is list. So that means I could use indexing to isolate specific components. But what's in there?
```
```{r}
## str(jFit) # too ugly to print here but you should look
names(jFit)
jFit$coefficients
## Using str() and names() reveals a great deal about this "lm" object and reading the help file for lm() would explain a great deal more. In the See Also section we learn there's a generic function coef() which looks promising.
coef(jFit)
## We have achieved our goal for this specific country -- we've gotten its intercept and slope. Now we need to package that as a function.
jFun <- function(x) coef(lm(lifeExp ~ I(year - yearMin), x))
jFun(jDat)  # trying out our new function ... yes still get same numbers
```
## Changing the names of the return values
```{r}
jFun <- function(x) {
estCoefs <- coef(lm(lifeExp ~ I(year - yearMin), x))
names(estCoefs) <- c("intercept", "slope")
return(estCoefs)
}
jFun(jDat)  # trying out our improved function ... yes still get same numbers
```
## Testing the new function on some examples
```{r}
jFun(subset(gDat, country == "Canada"))
jFun(subset(gDat, country == "Uruguay"))
jFun(subset(gDat, country == "India"))
jFun(subset(gDat, country == "Japan"))
jFun(subset(gDat, country == "Iceland"))
```
## Scaling up -- Placing the function inside ddply()
```{r}
jCoefs <- ddply(gDat, ~country, jFun)
str(jCoefs)
tail(jCoefs)
```
# Review: This would be the final script
```{r}
## realistically, you would read the data from a local file
gdURL <- "http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt"
gDat <- read.delim(file = gdURL)
## str(gDat) here when working interactively
yearMin <- min(gDat$year)
jFun <- function(x) {
estCoefs <- coef(lm(lifeExp ~ I(year - yearMin), x))
names(estCoefs) <- c("intercept", "slope")
return(estCoefs)
}
## jFun(subset(gDat, country == 'India')) to see what it does
jCoefs <- ddply(gDat, ~country, jFun)
```
## Installing and loading xtable
```{r}
install.packages("xtable", dependencies = TRUE)
library(xtable)
```
## Pick some countries at random and display their estimated coefficients
```{r}
set.seed(916)
foo <- jCoefs[sample(nrow(jCoefs), size = 15), ]
foo <- xtable(foo)
print(foo, type = "html", include.rownames = FALSE)
## Two easy improvements: include the continent informaiton and sort rationally
jCoefs <- ddply(gDat, ~country + continent, jFun)
str(jCoefs)
tail(jCoefs)
## Now, prior to making the HTML table, we will sort the data.frame, so it starts with the country with the shortest life expectancy in 1952, and goes to the largest.
set.seed(916)
foo <- jCoefs[sample(nrow(jCoefs), size = 15), ]
foo <- arrange(foo, intercept)
## foo <- foo[order(foo$intercept), ] # an uglier non-plyr way
foo <- xtable(foo)
print(foo, type = "html", include.rownames = FALSE)
```
# jFun only requires one argument, x. What if it had more than one argument?
```{r}
jFunTwoArgs <- function(x, cvShift = 0) {
estCoefs <- coef(lm(lifeExp ~ I(year - cvShift), x))
names(estCoefs) <- c("intercept", "slope")
return(estCoefs)
}
jCoefsSilly <- ddply(gDat, ~country, jFunTwoArgs)
head(jCoefsSilly)
## We are getting the same estimated slopes but the silly year 0 intercepts we've seen before. Let's use the cvShift = argument to resolve this.
jCoefsSane <- ddply(gDat, ~country, jFunTwoArgs, cvShift = 1952)
head(jCoefsSane)
## We're back to our usual estimated intercepts, which reflect life expectancy in 1952. Of course hard-wiring 1952 is not a great idea, so here's probably our best code yet:
jCoefsBest <- ddply(gDat, ~country, jFunTwoArgs, cvShift = min(gDat$year))
head(jCoefsBest)
```
install.packages("xtable", dependencies = TRUE)
install.packages('googleVis')
install.packages('googleVis', dependencies=TRUE)
library(googleVIS)
library(googleVis)
titanic3 <- read.csv("~/Documents/MSU Law/Spring 2014/Legal Analytics/Legal_Analytics_Spring_2014/Problem_Set_3/Problem_1/titanic3.csv")
View(titanic3)
View(titanic3)
View(titanic3)
source('~/.active-rstudio-document', echo=TRUE)
library(foreign)
read.spss("titanic3.sav")
setwd("~/Documents/MSU Law/Spring 2014/Legal Analytics/Legal_Analytics_Spring_2014/Problem_Set_3/Problem_1")
read.spss("titanic3.sav")
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
library(ctree)
install.packages("ctree", dependencies = TRUE)
install.packages("party", dependencies = TRUE)
install.packages("rattle", dependencies=TRUE)
install.packages("NbClust", dependencies=TRUE)
install.packages("flexclust", depenencies=TRUE)
install.packages("flexclust", dependencies=TRUE)
